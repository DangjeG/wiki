components:
  schemas:
    BaseResponse:
      properties:
        msg:
          default: ''
          title: Msg
          type: string
        status:
          default: success
          title: Status
          type: string
      title: BaseResponse
      type: object
    CreateUser:
      properties:
        display_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Display Name
        email:
          format: email
          title: Email
          type: string
        first_name:
          title: First Name
          type: string
        is_user_agreement_accepted:
          default: false
          title: Is User Agreement Accepted
          type: boolean
        last_name:
          title: Last Name
          type: string
        organization_id:
          format: uuid
          title: Organization Id
          type: string
        second_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Second Name
        user_position:
          anyOf:
          - type: string
          - type: 'null'
          title: User Position
        username:
          title: Username
          type: string
      required:
      - email
      - username
      - first_name
      - last_name
      - organization_id
      title: CreateUser
      type: object
    FrontendUserLogin:
      properties:
        email:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
        username:
          anyOf:
          - type: string
          - type: 'null'
          title: Username
      title: FrontendUserLogin
      type: object
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthCheck:
      description: Response model to validate and return when performing a health
        check.
      properties:
        status:
          default: OK
          title: Status
          type: string
      title: HealthCheck
      type: object
    OrganizationAccessType:
      enum:
      - FULL_ACCESS
      - WEB_ONLY
      - LOCKED
      title: OrganizationAccessType
      type: string
    OrganizationInfoResponse:
      properties:
        access:
          $ref: '#/components/schemas/OrganizationAccessType'
        description:
          title: Description
          type: string
        name:
          title: Name
          type: string
      required:
      - name
      - description
      - access
      title: OrganizationInfoResponse
      type: object
    ResponsibilityType:
      enum:
      - 0
      - 500
      - 1000
      title: ResponsibilityType
      type: integer
    UserInfoResponse:
      properties:
        email:
          title: Email
          type: string
        first_name:
          title: First Name
          type: string
        last_name:
          title: Last Name
          type: string
        responsibility:
          $ref: '#/components/schemas/ResponsibilityType'
        second_name:
          anyOf:
          - type: string
          - type: 'null'
          title: Second Name
        user_name:
          anyOf:
          - type: string
          - type: 'null'
          title: User Name
      required:
      - email
      - first_name
      - last_name
      - responsibility
      title: UserInfoResponse
      type: object
    UserSignResponse:
      properties:
        email_to:
          format: email
          title: Email To
          type: string
        expire_minutes:
          default: 5
          title: Expire Minutes
          type: integer
        verify_token:
          title: Verify Token
          type: string
      required:
      - email_to
      - verify_token
      title: UserSignResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
  securitySchemes:
    WikiAccessToken:
      in: cookie
      name: wiki_access_token
      type: apiKey
    WikiApiKey:
      in: header
      name: X-Wiki-API-Key
      type: apiKey
    WikiBearer:
      scheme: bearer
      type: http
info:
  description: Welcome to Wiki's API documentation! Here you will able to discover
    all of the ways you can interact with the Wiki API.
  title: Wiki API
  version: 0.0.1
openapi: 3.1.0
paths:
  /api/v1/auth/login:
    post:
      description: '## Logging in to a user account

        The endpoint for sending an email or username and receiving a login confirmation
        token.

        A confirmation code will be sent to the specified email.'
      operationId: login_api_v1_auth_login_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FrontendUserLogin'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignResponse'
          description: Verification token data.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Login by email or username
      tags:
      - Auth
  /api/v1/auth/signup:
    post:
      description: '## Registration - submitting an application

        Sending an application for registration in the system.'
      operationId: signup_api_v1_auth_signup_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
        required: true
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSignResponse'
          description: Verification token data.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Signup with user data entry
      tags:
      - Auth
  /api/v1/auth/verify:
    get:
      description: '## Verification on the sent code

        Endpoint for confirming the code received by mail, issuing access token to
        perform authorized actions.'
      operationId: verify_api_v1_auth_verify_get
      parameters:
      - in: query
        name: token
        required: true
        schema:
          title: Token
          type: string
      - in: query
        name: verification_code
        required: true
        schema:
          title: Verification Code
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
          description: Cookies are set. Success message.
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Verification by token and code
      tags:
      - Auth
  /api/v1/organization/:
    post:
      description: Create organization.
      operationId: create_organization_api_v1_organization__post
      parameters:
      - in: query
        name: name
        required: true
        schema:
          title: Name
          type: string
      - in: query
        name: description
        required: true
        schema:
          title: Description
          type: string
      - in: query
        name: access
        required: true
        schema:
          $ref: '#/components/schemas/OrganizationAccessType'
      responses:
        '202':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfoResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Create Organization
      tags:
      - Organization
  /api/v1/organization/all:
    get:
      description: Get all organizations.
      operationId: get_organizations_api_v1_organization_all_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OrganizationInfoResponse'
                title: Response Get Organizations Api V1 Organization All Get
                type: array
          description: Successful Response
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Get Organizations
      tags:
      - Organization
  /api/v1/organization/info:
    get:
      description: Get organization by id.
      operationId: get_organization_api_v1_organization_info_get
      parameters:
      - in: query
        name: id
        required: true
        schema:
          format: uuid
          title: Id
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationInfoResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Get Organization
      tags:
      - Organization
  /api/v1/user/:
    delete:
      operationId: delete_user_api_v1_user__delete
      parameters:
      - in: query
        name: user_id
        required: false
        schema:
          anyOf:
          - format: uuid
            type: string
          - type: 'null'
          title: User Id
      - in: query
        name: user_name
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: User Name
      - in: query
        name: email
        required: false
        schema:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BaseResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Delete user
      tags:
      - User
  /api/v1/user/all:
    get:
      operationId: get_users_api_v1_user_all_get
      responses:
        '200':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInfoResponse'
                title: Response Get Users Api V1 User All Get
                type: array
          description: Successful Response
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Get all users
      tags:
      - User
  /api/v1/user/info:
    get:
      operationId: get_user_api_v1_user_info_get
      parameters:
      - in: query
        name: user_id
        required: false
        schema:
          anyOf:
          - format: uuid
            type: string
          - type: 'null'
          title: User Id
      - in: query
        name: user_name
        required: false
        schema:
          anyOf:
          - type: string
          - type: 'null'
          title: User Name
      - in: query
        name: email
        required: false
        schema:
          anyOf:
          - format: email
            type: string
          - type: 'null'
          title: Email
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Get user by id or username or email
      tags:
      - User
  /api/v1/user/me:
    get:
      operationId: get_me_api_v1_user_me_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfoResponse'
          description: Successful Response
      security:
      - WikiApiKey: []
      - WikiApiKey: []
      - WikiAccessToken: []
      - WikiBearer: []
      summary: Get info about the current user
      tags:
      - User
  /health:
    get:
      description: "## Perform a Health Check\nEndpoint to perform a healthcheck on.\
        \ This endpoint can primarily be used Docker\nto ensure a robust container\
        \ orchestration and management is in place. Other\nservices which rely on\
        \ proper functioning of the API service will not deploy if this\nendpoint\
        \ returns any other HTTP status code except 200 (OK).\nReturns:\n    HealthCheck:\
        \ Returns a JSON response with the health status"
      operationId: get_health_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
          description: Return HTTP Status Code 200 (OK)
      summary: Perform a Health Check
      tags:
      - HealthCheck
servers:
- description: Local server
  url: http://localhost:8000/
- description: Demo server
  url: https://api.wiki.example.com/
- description: Ngrok 1
  url: https://2c89-176-59-215-45.ngrok-free.app/
